 module pass_auth (
    input clk,
    input rst,
    input [3:0] user_input,
    input enter,
    output reg access_granted,
    output reg locked
);

    
parameter   IDLE    = 3'b000,
            INPUT   = 3'b001,
            VERIFY  = 3'b010,
            SUCCESS = 3'b011,
            FAIL    = 3'b100,
            LOCKED  = 3'b101;
    

    reg[2:0]state, next_state;

    reg [3:0] stored_password [3:0];  // 4-digit password
    reg [3:0] input_password [3:0];
    reg [1:0] input_index;
    reg [2:0] fail_count;

    always@(posedge clk ,posedge rst)
      begin
	if(rst)
	  begin
    state <= IDLE;
    input_index <= 0;
    fail_count <= 0;
    access_granted <= 0;
    locked <= 0;

    // Initialize stored password
    stored_password[0] <= 4'd1;
    stored_password[1] <= 4'd2;
    stored_password[2] <= 4'd3;
    stored_password[3] <= 4'd4;
end
	else
	  state <= next_state;
      end

    always@(*)
	begin
	  next_state = state;
	  case(state)
	  IDLE: if(enter)
		  next_state = INPUT;
		else
		  next_state = IDLE;

	  INPUT: if((input_index >= 3)&&(enter))
		  next_state = VERIFY;

	  VERIFY: if((input_password[0] == stored_password[0]) && 
		      (input_password[1] == stored_password[1]) &&
			(input_password[2] == stored_password[2]) &&
			(input_password[3] == stored_password[3]))
		    next_state = SUCCESS;
		  else
		    next_state = FAIL;
	  SUCCESS: next_state  = IDLE;

	  FAIL: if(fail_count >= 3)
		 next_state = LOCKED;
		else
		  next_state  = IDLE;
	
 	  LOCKED: next_state = LOCKED;

  endcase
      end

  //INPUT CAPTURE AND OUTPUT LOGIC

   always@(posedge clk)
	begin
	  if((state == INPUT) && enter)
	    begin
		input_password[input_index] <= user_input;
		input_index <= input_index + 1;
            end
	  if(state == SUCCESS)
	  begin
		access_granted <= 1;
		fail_count <= 0;
	  end
	  if(state == FAIL)
	   begin
	    access_granted <= 0;
	    fail_count <= fail_count + 1;
	    locked <= 0;
	  end
	  if(state == LOCKED )
	     locked <= 1;
  	end
  
endmodule 




	  
	
